//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { UsersEntity } from './db/Users.entity';
import { VendorsEntity } from './db/Vendors.entity';
import { CustomersEntity } from './db/Customers.entity';
import { InventoryEntity } from './db/Inventory.entity';
import { ProductsEntity } from './db/Products.entity';
import { ProductCategoriesEntity } from './db/ProductCategories.entity';
import { DiscountsEntity } from './db/Discounts.entity';
import { ShoppingCartEntity } from './db/ShoppingCart.entity';
import { OrdersEntity } from './db/Orders.entity';
import { OrderDetailsEntity } from './db/OrderDetails.entity';
import { PaymentsEntity } from './db/Payments.entity';
import { ReviewsEntity } from './db/Reviews.entity';
import { SupportTicketsEntity } from './db/SupportTickets.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      UsersEntity,
      VendorsEntity,
      CustomersEntity,
      InventoryEntity,
      ProductsEntity,
      ProductCategoriesEntity,
      DiscountsEntity,
      ShoppingCartEntity,
      OrdersEntity,
      OrderDetailsEntity,
      PaymentsEntity,
      ReviewsEntity,
      SupportTicketsEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      Users: [
        {
          username: 'userOne',
          email: 'userone@example.com',
          password: 'password123',
          role: 'admin',
        },
        {
          username: 'userTwo',
          email: 'usertwo@example.com',
          password: 'password456',
          role: 'vendor',
        },
        {
          username: 'userThree',
          email: 'userthree@example.com',
          password: 'password789',
          role: 'customer',
        },
        {
          username: 'userFour',
          email: 'userfour@example.com',
          password: 'password101',
          role: 'admin',
        },
        {
          username: 'userFive',
          email: 'userfive@example.com',
          password: 'password202',
          role: 'vendor',
        },
      ],
      Vendors: [
        {
          companyName: 'Tech Innovations Inc.',
          contactName: 'John Doe',
          email: 'johndoe@techinnovations.com',
          password: 'password123',
        },
        {
          companyName: 'Global Goods Ltd.',
          contactName: 'Jane Smith',
          email: 'janesmith@globalgoods.com',
          password: 'securePass456',
        },
        {
          companyName: 'Eco Solutions',
          contactName: 'Michael Green',
          email: 'michaelgreen@ecosolutions.com',
          password: 'ecoFriendly789',
        },
        {
          companyName: 'Fashion Forward',
          contactName: 'Emily White',
          email: 'emilywhite@fashionforward.com',
          password: 'fashionPass012',
        },
        {
          companyName: 'Gadget Galaxy',
          contactName: 'Alex Brown',
          email: 'alexbrown@gadgetgalaxy.com',
          password: 'gadgetSecure345',
        },
      ],
      Customers: [
        {
          customerName: 'John Doe',
          email: 'johndoe@example.com',
          password: 'password123',
          billingAddress: '1234 Main St, Anytown, USA',
          shippingAddress: '1234 Main St, Anytown, USA',
          country: 'USA',
          phone: '555-1234',
        },
        {
          customerName: 'Jane Smith',
          email: 'janesmith@example.com',
          password: 'password456',
          billingAddress: '5678 Oak St, Sometown, USA',
          shippingAddress: '5678 Oak St, Sometown, USA',
          country: 'USA',
          phone: '555-5678',
        },
        {
          customerName: 'Ahmed Khan',
          email: 'ahmedkhan@example.com',
          password: 'password789',
          billingAddress: '123 Jasmine Rd, New City, India',
          shippingAddress: '123 Jasmine Rd, New City, India',
          country: 'India',
          phone: '555-7890',
        },
        {
          customerName: 'Liu Wei',
          email: 'liuwei@example.com',
          password: 'password012',
          billingAddress: '456 Cherry Blossom Ave, Old Town, China',
          shippingAddress: '456 Cherry Blossom Ave, Old Town, China',
          country: 'China',
          phone: '555-0123',
        },
        {
          customerName: 'Maria Garcia',
          email: 'mariagarcia@example.com',
          password: 'password345',
          billingAddress: '789 Pine St, Capital City, Spain',
          shippingAddress: '789 Pine St, Capital City, Spain',
          country: 'Spain',
          phone: '555-3456',
        },
      ],
      Inventory: [
        { product: '1', quantity: 150, lowStockThreshold: 20 },
        { product: '2', quantity: 75, lowStockThreshold: 10 },
        { product: '3', quantity: 200, lowStockThreshold: 15 },
        { product: '4', quantity: 50, lowStockThreshold: 5 },
        { product: '5', quantity: 100, lowStockThreshold: 25 },
      ],
      Products: [
        {
          productName: 'Eco-Friendly Water Bottle',
          vendor: 1,
          price: 19.99,
          weight: 0.5,
          description:
            'A sustainable water bottle made from recycled materials.',
          thumbnail: 'https://example.com/thumbnail1.jpg',
          image: 'https://example.com/image1.jpg',
          category: 2,
          creation_date: '2023-04-01T12:00:00Z',
          stock: 150,
        },
        {
          productName: 'Wireless Bluetooth Headphones',
          vendor: 2,
          price: 89.99,
          weight: 0.3,
          description: 'High-quality sound with noise cancellation feature.',
          thumbnail: 'https://example.com/thumbnail2.jpg',
          image: 'https://example.com/image2.jpg',
          category: 3,
          creation_date: '2023-04-02T12:00:00Z',
          stock: 200,
        },
        {
          productName: 'Organic Cotton T-Shirt',
          vendor: 3,
          price: 29.99,
          weight: 0.2,
          description:
            'Comfortable and eco-friendly T-shirt made from organic cotton.',
          thumbnail: 'https://example.com/thumbnail3.jpg',
          image: 'https://example.com/image3.jpg',
          category: 1,
          creation_date: '2023-04-03T12:00:00Z',
          stock: 100,
        },
        {
          productName: 'Smart Fitness Watch',
          vendor: 4,
          price: 199.99,
          weight: 0.1,
          description: 'Track your fitness activity and monitor your health.',
          thumbnail: 'https://example.com/thumbnail4.jpg',
          image: 'https://example.com/image4.jpg',
          category: 4,
          creation_date: '2023-04-04T12:00:00Z',
          stock: 50,
        },
        {
          productName: 'Gourmet Coffee Beans',
          vendor: 5,
          price: 15.99,
          weight: 1,
          description:
            'Rich and aromatic coffee beans sourced from the best regions.',
          thumbnail: 'https://example.com/thumbnail5.jpg',
          image: 'https://example.com/image5.jpg',
          category: 5,
          creation_date: '2023-04-05T12:00:00Z',
          stock: 300,
        },
      ],
      ProductCategories: [
        { category: 'Electronics' },
        { category: 'Clothing' },
        { category: 'Home & Garden' },
        { category: 'Books' },
        { category: 'Sports & Outdoors' },
      ],
      Discounts: [
        {
          product: 1,
          discountType: 'Percentage',
          description: '10% off on all electronics for the first purchase.',
          discountAmount: 0,
          discountPercent: 10,
        },
        {
          product: 2,
          discountType: 'Flat',
          description: '$5 off on books over $20.',
          discountAmount: 5,
          discountPercent: 0,
        },
        {
          product: 3,
          discountType: 'Percentage',
          description: '15% off on all kitchen appliances this weekend.',
          discountAmount: 0,
          discountPercent: 15,
        },
        {
          product: 4,
          discountType: 'Flat',
          description: '$10 off on your next purchase of shoes over $50.',
          discountAmount: 10,
          discountPercent: 0,
        },
        {
          product: 5,
          discountType: 'Percentage',
          description: '20% off on all fashion items during the holiday sale.',
          discountAmount: 0,
          discountPercent: 20,
        },
      ],
      ShoppingCart: [
        { customer: 1, product: 2, price: 19.99, quantity: 3 },
        { customer: 2, product: 3, price: 29.99, quantity: 2 },
        { customer: 3, product: 4, price: 39.99, quantity: 1 },
        { customer: 4, product: 5, price: 49.99, quantity: 5 },
        { customer: 5, product: 1, price: 59.99, quantity: 4 },
      ],
      Orders: [
        {
          orderNumber: 'ORD001',
          customer: 1,
          totalAmount: 150,
          vat: 20,
          totalAmountWithVat: 170,
          shippingCost: 5,
          shippingAddress: '123 Elm St, Springfield, USA',
          orderAddress: '123 Elm St, Springfield, USA',
          orderEmail: 'customer1@example.com',
          orderDate: '2023-04-01T10:00:00Z',
          orderStatus: 'Shipped',
          trackingNo: 'TRACK001',
        },
        {
          orderNumber: 'ORD002',
          customer: 2,
          totalAmount: 200,
          vat: 40,
          totalAmountWithVat: 240,
          shippingCost: 10,
          shippingAddress: '456 Maple St, Gotham, USA',
          orderAddress: '456 Maple St, Gotham, USA',
          orderEmail: 'customer2@example.com',
          orderDate: '2023-04-02T11:00:00Z',
          orderStatus: 'Processing',
          trackingNo: 'TRACK002',
        },
        {
          orderNumber: 'ORD003',
          customer: 3,
          totalAmount: 250,
          vat: 50,
          totalAmountWithVat: 300,
          shippingCost: 15,
          shippingAddress: '789 Birch St, Metropolis, USA',
          orderAddress: '789 Birch St, Metropolis, USA',
          orderEmail: 'customer3@example.com',
          orderDate: '2023-04-03T12:00:00Z',
          orderStatus: 'Delivered',
          trackingNo: 'TRACK003',
        },
        {
          orderNumber: 'ORD004',
          customer: 4,
          totalAmount: 300,
          vat: 60,
          totalAmountWithVat: 360,
          shippingCost: 20,
          shippingAddress: '101 Oak St, Star City, USA',
          orderAddress: '101 Oak St, Star City, USA',
          orderEmail: 'customer4@example.com',
          orderDate: '2023-04-04T13:00:00Z',
          orderStatus: 'Cancelled',
          trackingNo: 'TRACK004',
        },
        {
          orderNumber: 'ORD005',
          customer: 5,
          totalAmount: 350,
          vat: 70,
          totalAmountWithVat: 420,
          shippingCost: 25,
          shippingAddress: '202 Pine St, Central City, USA',
          orderAddress: '202 Pine St, Central City, USA',
          orderEmail: 'customer5@example.com',
          orderDate: '2023-04-05T14:00:00Z',
          orderStatus: 'Returned',
          trackingNo: 'TRACK005',
        },
      ],
      OrderDetails: [
        { orderNumber: 1, line: 1, product: 3, price: 29.99, quantity: 2 },
        { orderNumber: 2, line: 1, product: 1, price: 15.75, quantity: 1 },
        { orderNumber: 3, line: 2, product: 4, price: 45.5, quantity: 3 },
        { orderNumber: 4, line: 3, product: 2, price: 9.99, quantity: 5 },
        { orderNumber: 5, line: 2, product: 5, price: 120, quantity: 1 },
      ],
      Payments: [
        {
          orderNumber: 1,
          amount: 150.75,
          paymentMethod: 'Credit Card',
          paymentDate: '2023-04-01T12:30:00',
          paymentStatus: 'Completed',
        },
        {
          orderNumber: 2,
          amount: 220.5,
          paymentMethod: 'PayPal',
          paymentDate: '2023-04-02T15:45:00',
          paymentStatus: 'Pending',
        },
        {
          orderNumber: 3,
          amount: 85.99,
          paymentMethod: 'Debit Card',
          paymentDate: '2023-04-03T10:20:00',
          paymentStatus: 'Completed',
        },
        {
          orderNumber: 4,
          amount: 300,
          paymentMethod: 'Bank Transfer',
          paymentDate: '2023-04-04T16:00:00',
          paymentStatus: 'Failed',
        },
        {
          orderNumber: 5,
          amount: 450.25,
          paymentMethod: 'Credit Card',
          paymentDate: '2023-04-05T18:30:00',
          paymentStatus: 'Completed',
        },
      ],
      Reviews: [
        {
          product: 1,
          customer: 3,
          vendor: 2,
          rating: 5,
          reviewDetails:
            'Absolutely love this product! The quality exceeded my expectations.',
          date: '2023-04-01T13:45:00Z',
        },
        {
          product: 2,
          customer: 1,
          vendor: 1,
          rating: 4,
          reviewDetails:
            'Good value for the price. Would recommend to friends.',
          date: '2023-04-02T10:30:00Z',
        },
        {
          product: 3,
          customer: 4,
          vendor: 5,
          rating: 3,
          reviewDetails: 'Average product, nothing special but does the job.',
          date: '2023-04-03T15:20:00Z',
        },
        {
          product: 4,
          customer: 2,
          vendor: 3,
          rating: 2,
          reviewDetails:
            'Not very satisfied. The product did not meet my expectations.',
          date: '2023-04-04T09:00:00Z',
        },
        {
          product: 5,
          customer: 5,
          vendor: 4,
          rating: 1,
          reviewDetails: 'Poor quality and service. Would not buy again.',
          date: '2023-04-05T18:30:00Z',
        },
      ],
      SupportTickets: [
        {
          user: 'Alex123',
          customer: 'JohnDoe',
          description: 'Issue with the last order not being delivered.',
          status: 'Open',
          creationDate: '2023-04-01T10:00:00Z',
          resolutionDate: '1970-01-01T00:00:00.000Z',
        },
        {
          user: 'TechSupport01',
          customer: 'EmilyR',
          description: 'Payment was charged twice for a single order.',
          status: 'Resolved',
          creationDate: '2023-04-02T11:30:00Z',
          resolutionDate: '2023-04-03T16:00:00Z',
        },
        {
          user: 'AdminMike',
          customer: 'TomSawyer',
          description: 'Cannot log in to the customer account.',
          status: 'In Progress',
          creationDate: '2023-04-04T09:20:00Z',
          resolutionDate: '1970-01-01T00:00:00.000Z',
        },
        {
          user: 'SupportAgent007',
          customer: 'NancyP',
          description: 'Received a damaged product.',
          status: 'Open',
          creationDate: '2023-04-05T14:45:00Z',
          resolutionDate: '1970-01-01T00:00:00.000Z',
        },
        {
          user: 'HelpDesk22',
          customer: 'GeorgeK',
          description: 'Query about product warranty.',
          status: 'Resolved',
          creationDate: '2023-04-06T12:10:00Z',
          resolutionDate: '2023-04-07T15:30:00Z',
        },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('UsersEntity', data.Users);
      await this.SeedResource('VendorsEntity', data.Vendors);
      await this.SeedResource('CustomersEntity', data.Customers);
      await this.SeedResource('InventoryEntity', data.Inventory);
      await this.SeedResource('ProductsEntity', data.Products);
      await this.SeedResource(
        'ProductCategoriesEntity',
        data.ProductCategories,
      );
      await this.SeedResource('DiscountsEntity', data.Discounts);
      await this.SeedResource('ShoppingCartEntity', data.ShoppingCart);
      await this.SeedResource('OrdersEntity', data.Orders);
      await this.SeedResource('OrderDetailsEntity', data.OrderDetails);
      await this.SeedResource('PaymentsEntity', data.Payments);
      await this.SeedResource('ReviewsEntity', data.Reviews);
      await this.SeedResource('SupportTicketsEntity', data.SupportTickets);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
